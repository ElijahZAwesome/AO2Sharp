### YamlMime:ManagedReference
items:
- uid: Alibi.Plugins.API.IAOPacket
  commentId: T:Alibi.Plugins.API.IAOPacket
  id: IAOPacket
  parent: Alibi.Plugins.API
  children:
  - Alibi.Plugins.API.IAOPacket.Objects
  - Alibi.Plugins.API.IAOPacket.Type
  langs:
  - csharp
  - vb
  name: IAOPacket
  nameWithType: IAOPacket
  fullName: Alibi.Plugins.API.IAOPacket
  type: Interface
  source:
    remote:
      path: Alibi.Plugins.API/IAOPacket.cs
      branch: main
      repo: https://github.com/ElijahZAwesome/Alibi.git
    id: IAOPacket
    path: ../IAOPacket.cs
    startLine: 2
  assemblies:
  - Alibi.Plugins.API
  namespace: Alibi.Plugins.API
  syntax:
    content: public interface IAOPacket
    content.vb: Public Interface IAOPacket
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Alibi.Plugins.API.IAOPacket.Type
  commentId: P:Alibi.Plugins.API.IAOPacket.Type
  id: Type
  parent: Alibi.Plugins.API.IAOPacket
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: IAOPacket.Type
  fullName: Alibi.Plugins.API.IAOPacket.Type
  type: Property
  source:
    remote:
      path: Alibi.Plugins.API/IAOPacket.cs
      branch: main
      repo: https://github.com/ElijahZAwesome/Alibi.git
    id: Type
    path: ../IAOPacket.cs
    startLine: 4
  assemblies:
  - Alibi.Plugins.API
  namespace: Alibi.Plugins.API
  syntax:
    content: string Type { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Property Type As String
  overload: Alibi.Plugins.API.IAOPacket.Type*
  modifiers.csharp:
  - get
  - set
- uid: Alibi.Plugins.API.IAOPacket.Objects
  commentId: P:Alibi.Plugins.API.IAOPacket.Objects
  id: Objects
  parent: Alibi.Plugins.API.IAOPacket
  langs:
  - csharp
  - vb
  name: Objects
  nameWithType: IAOPacket.Objects
  fullName: Alibi.Plugins.API.IAOPacket.Objects
  type: Property
  source:
    remote:
      path: Alibi.Plugins.API/IAOPacket.cs
      branch: main
      repo: https://github.com/ElijahZAwesome/Alibi.git
    id: Objects
    path: ../IAOPacket.cs
    startLine: 5
  assemblies:
  - Alibi.Plugins.API
  namespace: Alibi.Plugins.API
  syntax:
    content: string[] Objects { get; set; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Property Objects As String()
  overload: Alibi.Plugins.API.IAOPacket.Objects*
  modifiers.csharp:
  - get
  - set
references:
- uid: Alibi.Plugins.API
  commentId: N:Alibi.Plugins.API
  name: Alibi.Plugins.API
  nameWithType: Alibi.Plugins.API
  fullName: Alibi.Plugins.API
- uid: Alibi.Plugins.API.IAOPacket.Type*
  commentId: Overload:Alibi.Plugins.API.IAOPacket.Type
  name: Type
  nameWithType: IAOPacket.Type
  fullName: Alibi.Plugins.API.IAOPacket.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Alibi.Plugins.API.IAOPacket.Objects*
  commentId: Overload:Alibi.Plugins.API.IAOPacket.Objects
  name: Objects
  nameWithType: IAOPacket.Objects
  fullName: Alibi.Plugins.API.IAOPacket.Objects
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
